1. creare i fat jar dei microservizi, del gateway, del frontend.
2. scrivere il Dockerfile dei microservizi, del gateway, del frontend, ciascun Dockerfile in una cartella specifica assieme al fat jar dell'applicativo a cui si riferisce.
3. produrre l'immagine Docker di ogni elemento andando nella cartella dove sono presenti il Dockerfile e il fat jar ed eseguendo il comando di creazione dell'immagine Docker
4. pushare l'immagine prodotta su DockerHub
5. andare su Github e creare una nuova applicazione Oauth con redirect url fittizio, ad esempio http://localhost:8080/path/of/redirect giusto per prendere CliendId e ClientSecret prodotti
6. scrivere i vari deployment.yaml per ogni elemento del sistema: ognuno di essi deve avere dei pod e un load balancer. I servizi hanno un load balancer di tipo NodePort perche' non deve essere esposto all'esterno, mentre il gateway e il frontend devono avere un load balancer di tipo LoadBalancer che ci fornisce un indirizzo statico accessibile dall'esterno del cluster kubernetes.
7. per connettere i servizi tra di loro (microservizio con microservizio, gateway con microservizi) usiamo delle variabili d'ambiente placeholder che indicano l'indirizzo da puntare con il loadbalancer, ovvero "http://microservizio1-lb". Questo placeholder viene recepito cosi come scritto e quando il servizio che ha memorizzata questa variabile d'ambiente chiama tale microservizio facendo una chiamata rest, il servizio Kube DNS di Kubernetes traduce questo nome nell'indirizzo vero (e variabile) del servizio puntato. Questa traduzione avviene solo nell'url e non nei query params o nel body e solo in uscita dal pod, quando la chiamata e' effettivamente partita, come un normale indirizzo 
.
8. Siccome il frontend usa il redirectUrl da passare come parametro, questo non puo' essere settato a "http://frontend-lb" ma deve essere copiato da minikube service list.
9. Le chiamate che il frontend fa al gateway sono fatte con Ajax tramite il browser e sono esterne al sistema DNS di K8s. Pertanto, anche la variabile d'ambiente che memorizza l'indirizzo del gateway non puo' essere settata a "http://gateway-lb" ma deve essere recuperata tramite minikube service list.
10. Quindi applicare i vari deployment con kubectl sul cluster k8s e poi fare minikube service list per recuperare gli indirizzi statici del frontend-lb e del gateway-lb. Inserirli nel deployment.yaml del frontend nelle due variabili d'ambiente, salvare e riapplicare nuovamente il deployment.yaml del frontend. Andare sul Github e aggiornare l'app Oauth inserendo l'indirizzo giusto del frontend-lb recuperato da minikube service list. Aggiornare l'app tanto ClientId e Client Secret non variano.
11. Andare sull'indirizzo del frontend e salvare l'app.
