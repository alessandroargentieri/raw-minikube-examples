1. creare app github con i due campi di redirect farlocchi, giusto per avere ClientID e ClientSecret
2. deployare backend microservices e rispettivi loadblancers come ClusterIP
3. deployare gateway (deployment e loadbalancer (come ClusterIP)) con tutte le variabili d'ambiente
4. deployare il frontend (deployment e loadbalancer (come ClusterIP)) con gatewayhost quello statico ottenuto da microservice list e frontendhost farlocco
5. fare minikube service list per avere anche l'indirizzo statico del frontendhost e settarlo nelle env dello yaml di deployment del frontend.
6. prendere l'inidirizzo statico del frontend e metterlo in Github nell'applicazione nei due campi e salvare.
7. riapplicare il deployment di frontend
8. chiamare dal browser: http://static-frontend-host/home

----------
1. deployare l'ingress, attivare l'https con il self signed certificate
2. creare le ingress resources usando i nomi logici dei loadbalancer (ClusterIP) del frontend e del backend
3. creare app github specificando nei campi di redirect il percorso https del frontend passando per il gateway
2. deployare backend microservices e rispettivi loadblancers come ClusterIP
3. deployare gateway (deployment e loadbalancer (come ClusterIP)) con tutte le variabili d'ambiente
4. deployare il frontend (deployment e loadbalancer (come ClusterIP)) con gatewayhost quello passando per l'ingress e frontend host idem
5. chiamare dal browser: https://example.com/javalin-api-gateway/frontend/home

ISTRUZIONI IN ORDINE*******************************************************************************************************************************************
~~~~~~~~~~~~~
1. attivare l'addons ingress
minikube addons list
minikube addons enable ingress

kubectl get pods -n kube-system

~~~~~~~~~~~~~~~

2. creare un self signed certificate
openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout tls.key -out tls.crt -subj "/CN=example.com" -days 365
kubectl create secret tls example-com-tls --cert=tls.crt --key=tls.key
kubectl get secret -o yaml

~~~~~~~~~~~~~~~~
3. aggiungere l'host DNS virtuale per cui abbiamo creato il certificato
echo "$(minikube ip) example.com" | sudo tee -a /etc/hosts
cat /etc/hosts | tail -1

~~~~~~~~~~~~~~~~

4. Creare l'App Github ... : 
(nuova: https://github.com/settings/applications/new)
(esistente: https://github.com/settings/applications/1243899)

Homepage url:              https://example.com
Authorization callbackUrl: https://example.com/login/oauth2/code/github (url di frontend)
(possiamo usare anche: https://example.com/login.html considerando che il FE riceve il code e state come query param)

Copiare ClientID e Secret

~~~~~~~~~~~~~~~~~

5. inserire nei deployment i seguenti valori:

**** in gateway-deployment.yaml: 
        - name: OAUTH2_CLIENT_SECRET
          value: "<Client-Secret generato da Github>"
        - name: OAUTH2_ACCESS_TOKEN_URL
          value: "https://github.com/login/oauth/access_token"
        - name: OAUTH2_PROVIDER_URL
          value: "https://api.github.com"
        - name: ENCRYPTION_PASSPHRASE
          value: "gTrvB78hfjkhg"
        - name: JWT_SECRET_KEY
          value: "hGyhjjg65fh6g"
        - name: SERVICE_NAME_1
          value: "javalin-api"
        - name: SERVICE_HOST_1
          value: "http://microservice-lb"
**** in frontend-deployment.yaml:
        - name: OAUTH2_CLIENT_ID
          value: "<Client-ID generato da Github>"
        - name: FRONTEND_HOST
          value:  "https://example.com"
        - name: LOGIN_REDIRECT_PATH
          value: "login/oauth2/code/github"
        - name: OAUTH2_STATE
          value: "fknrrdyjikfn"
        - name: OAUTH2_SCOPE
          value: "user"   
        - name: GATEWAY_HOST
          value: "https://example.com"
        - name: GATEWAY_ROOT_PATH
          value: "javalin-api-gateway"
        - name: OAUTH2_RESOURCE_PROVIDER_URL
          value: "https://github.com/login/oauth/authorize" 
******************************

~~~~~~~~~~~~~~~~~

6. kubectl apply -f microservice-deployment.yaml
   kubectl apply -f gateway-deployment.yaml
   kubectl apply -f frontend-deployment.yaml

~~~~~~~~~~~~~~~~~

7. applicare le ingress resource all'ingress controller gia' abilitato

cat > ingress.yaml << EOF 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: example-ingress
spec:
  tls:
    - secretName: example-com-tls
      hosts:
        - example.com
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: frontend-lb
          servicePort: 80 
      - path: /javalin-api-gateway
        backend:
          serviceName: gateway-lb
          servicePort: 80
EOF

kubectl apply -f ingress.yaml


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DEPLOYMENT FILES:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
microservice-deployment.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
apiVersion: v1
kind: Service              
metadata:
  name: microservice-lb
spec:
  type: NodePort       
  ports:
  - port: 80              
    targetPort: 7000        
  selector:            
    app: microservice    
---
apiVersion:  apps/v1 #extensions/v1beta1
kind: Deployment
metadata:
  name: microservice
  labels:
    app: microservice
spec:
  replicas: 2                                             
  minReadySeconds: 15
  strategy:
    type: RollingUpdate                                   
    rollingUpdate: 
      maxUnavailable: 1                                   
      maxSurge: 1                                         
  selector:
    matchLabels:
      app: microservice
      tier: experiment
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: microservice
        tier: experiment
    spec:
      containers:
      - image: alessandroargentieri/exp-microservice
        name: microservice
        ports:
        - containerPort: 7000
          name: caller
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gateway-deployment.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
apiVersion: v1
kind: Service              
metadata:
  name: gateway-lb
spec:
  type: LoadBalancer       
  ports:
  - port: 80              
    targetPort: 4000        
  selector:            
    app: gateway    
---
apiVersion:  apps/v1 #extensions/v1beta1
kind: Deployment
metadata:
  name: gateway
  labels:
    app: gateway
spec:
  replicas: 2                                             
  minReadySeconds: 15
  strategy:
    type: RollingUpdate                                   
    rollingUpdate: 
      maxUnavailable: 1                                   
      maxSurge: 1                                         
  selector:
    matchLabels:
      app: gateway
      tier: experiment
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: gateway
        tier: experiment
    spec:
      containers:
      - image: alessandroargentieri/exp-gateway
        name: gateway
        env:
        - name: OAUTH2_CLIENT_SECRET
          value: "880bbe71b5015700cbd46f4411f7c4e437dc6abb"
        - name: OAUTH2_ACCESS_TOKEN_URL
          value: "https://github.com/login/oauth/access_token"
        - name: OAUTH2_PROVIDER_URL
          value: "https://api.github.com"
        - name: ENCRYPTION_PASSPHRASE
          value: "gTrvB78hfjkhg"
        - name: JWT_SECRET_KEY
          value: "hGyhjjg65fh6g"
        - name: SERVICE_NAME_1
          value: "javalin-api"
        - name: SERVICE_HOST_1
          value: "http://microservice-lb"  
        ports:
        - containerPort: 4000
          name: gateway
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
frontend-deployment.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
apiVersion: v1
kind: Service              
metadata:
  name: frontend-lb
spec:
  type: LoadBalancer       
  ports:
  - port: 80              
    targetPort: 8080        
  selector:            
    app: frontend    
---
apiVersion:  apps/v1 #extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 2                                             
  minReadySeconds: 15
  strategy:
    type: RollingUpdate                                   
    rollingUpdate: 
      maxUnavailable: 1                                   
      maxSurge: 1                                         
  selector:
    matchLabels:
      app: frontend
      tier: experiment
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: frontend
        tier: experiment
    spec:
      containers:
      - image: alessandroargentieri/exp-frontend
        name: frontend
        env:
        - name: PROVA1
          value: http://frontend-lb
        - name: PROVA2
          value: http://gateway-lb  
        - name: PROVA3
          value: "http://frontend-lb"
        - name: PROVA4
          value: "http://gateway-lb"
        - name: PROVA5
          value: frontend-lb
        - name: PROVA6
          value: gateway-lb        
        - name: PROVA7
          value: http://gateway-lb.default.svc.cluster.local:80
        - name: PROVA8
          value: "gateway-lb"
        - name: OAUTH2_CLIENT_ID
          value: "efe81665e4bbab322bb8"
        - name: FRONTEND_HOST
          value:  "https://example.com" # "http://192.168.64.2:32065"     # http://frontend-lb  
        - name: LOGIN_REDIRECT_PATH
          value: "login/oauth2/code/github"
        - name: OAUTH2_STATE
          value: "fknrrdyjikfn"
        - name: OAUTH2_SCOPE
          value: "user"   
        - name: GATEWAY_HOST
          value: "https://example.com" # "https://example.com/api" # "http://192.168.64.2:32392"    # http://gateway-lb
        - name: GATEWAY_ROOT_PATH
          value: "javalin-api-gateway"
        - name: OAUTH2_RESOURCE_PROVIDER_URL
          value: "https://github.com/login/oauth/authorize"   
        ports:
        - containerPort: 8080
          name: frontend
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DOCKERFILES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
microservice/Dockerfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Dockerfile microservice

# install the base image
FROM openjdk:8-jdk-alpine

# create directory in the container
RUN mkdir /app 

# copy called.jar into the newly created directory
ADD microservice.jar /app/

# establish this directory as the working directory
WORKDIR /app 

# launch the microservice
CMD ["java", "-jar", "/app/microservice.jar"]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gateway/Dockerfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Dockerfile gateway

# install the base image
FROM openjdk:8-jdk-alpine

# create directory in the container
RUN mkdir /app 

# copy called.jar into the newly created directory
ADD gateway.jar /app/

# establish this directory as the working directory
WORKDIR /app 

# launch the microservice
CMD ["java", "-jar", "/app/gateway.jar"]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
frontend/Dockerfile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Dockerfile frontend

# install the base image
FROM openjdk:8-jdk-alpine

# create directory in the container
RUN mkdir /app 

# copy called.jar into the newly created directory
ADD frontend.jar /app/

# establish this directory as the working directory
WORKDIR /app 

# launch the microservice
CMD ["java", "-jar", "/app/frontend.jar"]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Quando tutto funziona, va rifatto il frontend: invece di home.html+login.html magari mettere index.html+login.html per incominciare
in modo tale da chiamare direttamente https://example.com ed ottenere la home.

~~~~~~~

aggiustare i source code
aggiustare i Dockerfile
aggiustare i deployment.yaml
mettere le istruzioni in ordine su come procedere per tirare su tutto il sistema

